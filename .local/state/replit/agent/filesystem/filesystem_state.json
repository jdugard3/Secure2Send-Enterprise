{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application for cannabis business compliance document management called \"Secure2Send\". The application provides a streamlined platform for cannabis businesses to submit compliance documents and for administrators to review and approve them. It features separate client and admin dashboards with comprehensive document management capabilities including upload, review, approval/rejection workflows, and progress tracking.\n\n## Current Status (January 2025)\nâœ… **COMPLETE AND FUNCTIONAL** - Custom authentication system implemented\n- Professional Secure2Send branding and UI implemented\n- **Custom authentication with email/password login system**\n- Client and Admin dashboards fully functional\n- Document upload system with drag & drop interface operational\n- 17 cannabis compliance document types supported\n- Admin review and approval system working\n- Progress tracking for clients implemented\n- Database schema deployed and running\n- Secure password hashing with bcrypt\n- Session-based authentication with PostgreSQL storage\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built as a React Single Page Application (SPA) using Vite as the build tool. The frontend follows a component-based architecture with:\n- **Component Library**: shadcn/ui components built on Radix UI primitives for consistent, accessible UI elements\n- **Styling**: Tailwind CSS with CSS custom properties for theming support\n- **State Management**: TanStack Query (React Query) for server state management with optimistic updates\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form for form state management with validation\n- **File Upload**: React Dropzone for drag-and-drop file upload interfaces\n\n## Backend Architecture\nThe server follows an Express.js REST API architecture with:\n- **Web Framework**: Express.js with TypeScript for type safety\n- **Database Layer**: Drizzle ORM for type-safe database operations with PostgreSQL\n- **File Upload**: Multer middleware for handling multipart form data and file uploads\n- **Session Management**: Express sessions with PostgreSQL storage for persistence\n- **API Design**: RESTful endpoints with consistent error handling and JSON responses\n\n## Authentication System\nAuthentication is implemented using a custom email/password system:\n- **Provider**: Custom authentication with secure password hashing (bcrypt)\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple and Passport.js\n- **Authorization**: Role-based access control with CLIENT and ADMIN roles\n- **Middleware**: Passport.js LocalStrategy with custom authentication middleware\n- **Security**: Secure password hashing with salt, session-based auth, CSRF protection\n\n## Database Design\nThe PostgreSQL database uses Drizzle ORM with a normalized schema:\n- **Users Table**: Stores user profiles with roles (CLIENT/ADMIN)\n- **Clients Table**: Business information and approval status\n- **Documents Table**: File metadata, types, and review status\n- **Sessions Table**: Server-side session storage for authentication\n- **Enums**: Strongly typed status enums for consistency\n\n## File Storage Strategy\nFiles are stored locally on the server filesystem:\n- **Upload Directory**: Dedicated uploads folder with security restrictions\n- **File Validation**: MIME type checking and size limits (50MB)\n- **Supported Formats**: PDF, JPG, PNG for document uploads\n- **Security**: File type validation and secure file serving\n\n# External Dependencies\n\n## Database Infrastructure\n- **Neon Database**: PostgreSQL database service via @neondatabase/serverless\n- **Connection Pooling**: Built-in connection pooling for scalability\n\n## UI Component System\n- **Radix UI**: Comprehensive set of unstyled, accessible UI primitives\n- **Shadcn/ui**: Pre-built components with Tailwind CSS styling\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n\n## Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Static type checking across the entire application\n- **Drizzle Kit**: Database migration and schema management tools\n\n## File Processing\n- **Multer**: Express middleware for handling file uploads\n- **React Dropzone**: Drag-and-drop file upload component\n\n## Authentication Provider\n- **Custom Auth**: Email/password authentication with bcrypt password hashing\n- **Passport.js**: Authentication middleware with LocalStrategy for email/password login\n\n## Session Management\n- **Connect PG Simple**: PostgreSQL session store for Express sessions\n- **Express Session**: Server-side session management\n\n## Development Environment\n- **Replit**: Cloud-based development environment with integrated deployment\n- **Replit Cartographer**: Development tooling for Replit environment\n- **Replit Runtime Error Modal**: Enhanced error reporting during development","size_bytes":4955},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/replit_agent_prompt_1754041761601.md":{"content":"# Secure2Send - Cannabis Compliance Document Management System - Replit Agent Prompt\n\n## Project Overview\nCreate a complete Next.js web application called \"Secure2Send\" for cannabis business compliance document management. This is a PROTOTYPE that will later be migrated to production, so focus on functionality over production-grade security.\n\n**Application Name**: Secure2Send\n**Domain**: secure2send.com (mentioned in branding/headers)\n**Purpose**: Streamline cannabis business compliance document submission and approval process\n\n## Tech Stack Requirements (MANDATORY)\n- **Framework**: Next.js 14+ with TypeScript and App Router\n- **Styling**: Tailwind CSS + shadcn/ui components for premium look\n- **Database**: Prisma ORM with SQLite for prototype\n- **Authentication**: NextAuth.js with email/password\n- **Forms**: React Hook Form + Zod validation\n- **File Upload**: react-dropzone + uploadthing for professional drag & drop\n- **Icons**: Lucide React\n- **UI Components**: shadcn/ui for polished, modern interface\n- **Animations**: Framer Motion for smooth interactions\n- **Notifications**: react-hot-toast for elegant feedback\n\n## Project Structure (CREATE EXACTLY THIS)\n```\nâ”œâ”€â”€ app/\nâ”‚   â”œâ”€â”€ (auth)/\nâ”‚   â”‚   â”œâ”€â”€ login/\nâ”‚   â”‚   â”‚   â””â”€â”€ page.tsx\nâ”‚   â”‚   â””â”€â”€ register/\nâ”‚   â”‚       â””â”€â”€ page.tsx\nâ”‚   â”œâ”€â”€ dashboard/\nâ”‚   â”‚   â”œâ”€â”€ layout.tsx\nâ”‚   â”‚   â”œâ”€â”€ page.tsx\nâ”‚   â”‚   â””â”€â”€ documents/\nâ”‚   â”‚       â””â”€â”€ page.tsx\nâ”‚   â”œâ”€â”€ admin/\nâ”‚   â”‚   â”œâ”€â”€ layout.tsx\nâ”‚   â”‚   â”œâ”€â”€ page.tsx\nâ”‚   â”‚   â””â”€â”€ documents/\nâ”‚   â”‚       â””â”€â”€ [id]/\nâ”‚   â”‚           â””â”€â”€ page.tsx\nâ”‚   â”œâ”€â”€ api/\nâ”‚   â”‚   â”œâ”€â”€ auth/\nâ”‚   â”‚   â”‚   â””â”€â”€ [...nextauth]/\nâ”‚   â”‚   â”‚       â””â”€â”€ route.ts\nâ”‚   â”‚   â”œâ”€â”€ register/\nâ”‚   â”‚   â”‚   â””â”€â”€ route.ts\nâ”‚   â”‚   â”œâ”€â”€ documents/\nâ”‚   â”‚   â”‚   â”œâ”€â”€ route.ts\nâ”‚   â”‚   â”‚   â””â”€â”€ [id]/\nâ”‚   â”‚   â”‚       â””â”€â”€ route.ts\nâ”‚   â”‚   â””â”€â”€ admin/\nâ”‚   â”‚       â””â”€â”€ documents/\nâ”‚   â”‚           â””â”€â”€ route.ts\nâ”‚   â”œâ”€â”€ components/\nâ”‚   â”‚   â”œâ”€â”€ ui/\nâ”‚   â”‚   â”‚   â”œâ”€â”€ Button.tsx\nâ”‚   â”‚   â”‚   â”œâ”€â”€ Input.tsx\nâ”‚   â”‚   â”‚   â””â”€â”€ Card.tsx\nâ”‚   â”‚   â”œâ”€â”€ DocumentUpload.tsx\nâ”‚   â”‚   â”œâ”€â”€ DocumentList.tsx\nâ”‚   â”‚   â”œâ”€â”€ AdminDocumentReview.tsx\nâ”‚   â”‚   â””â”€â”€ ProgressBar.tsx\nâ”‚   â”œâ”€â”€ lib/\nâ”‚   â”‚   â”œâ”€â”€ auth.ts\nâ”‚   â”‚   â”œâ”€â”€ db.ts\nâ”‚   â”‚   â”œâ”€â”€ utils.ts\nâ”‚   â”‚   â””â”€â”€ validations.ts\nâ”‚   â”œâ”€â”€ types/\nâ”‚   â”‚   â””â”€â”€ index.ts\nâ”‚   â”œâ”€â”€ globals.css\nâ”‚   â”œâ”€â”€ layout.tsx\nâ”‚   â””â”€â”€ page.tsx\nâ”œâ”€â”€ prisma/\nâ”‚   â”œâ”€â”€ schema.prisma\nâ”‚   â””â”€â”€ seed.ts\nâ”œâ”€â”€ public/\nâ”œâ”€â”€ .env.local\nâ”œâ”€â”€ next.config.js\nâ”œâ”€â”€ tailwind.config.js\nâ”œâ”€â”€ tsconfig.json\nâ””â”€â”€ package.json\n```\n\n## Database Schema (IMPLEMENT EXACTLY)\n```prisma\n// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String    @unique\n  password      String    // hashed with bcrypt\n  firstName     String\n  lastName      String\n  companyName   String?\n  role          UserRole  @default(CLIENT)\n  emailVerified Boolean   @default(false)\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n  \n  // Relations\n  clients       Client[]\n  sessions      Session[]\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel Client {\n  id          String       @id @default(cuid())\n  userId      String       // The user who created this client profile\n  status      ClientStatus @default(PENDING)\n  createdAt   DateTime     @default(now())\n  updatedAt   DateTime     @updatedAt\n  \n  // Relations\n  user        User         @relation(fields: [userId], references: [id])\n  documents   Document[]\n}\n\nmodel Document {\n  id              String         @id @default(cuid())\n  filename        String\n  originalName    String\n  fileSize        Int\n  mimeType        String\n  filePath        String         // Local file path for prototype\n  documentType    DocumentType\n  status          DocumentStatus @default(PENDING)\n  rejectionReason String?\n  clientId        String\n  uploadedAt      DateTime       @default(now())\n  reviewedAt      DateTime?\n  \n  // Relations\n  client          Client         @relation(fields: [clientId], references: [id])\n}\n\nenum UserRole {\n  ADMIN\n  CLIENT\n}\n\nenum ClientStatus {\n  PENDING\n  APPROVED\n  REJECTED\n  INCOMPLETE\n}\n\nenum DocumentType {\n  SS4_EIN_LETTER\n  W9\n  BENEFICIAL_OWNERSHIP\n  DRIVERS_LICENSE\n  PASSPORT\n  CANNABIS_LICENSE\n  SEED_TO_SALE_INFO\n  POS_INFO\n  BANKING_INFO\n  BANK_STATEMENTS\n  ARTICLES_OF_INCORPORATION\n  OPERATING_AGREEMENT\n  BUSINESS_LICENSE\n  VOIDED_CHECK\n  COA_PRODUCTS\n  PROVIDER_CONTRACT\n  INSURANCE_COVERAGE\n}\n\nenum DocumentStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n```\n\n## Required Document Types with Validation Rules\n```typescript\nexport const DOCUMENT_REQUIREMENTS = {\n  SS4_EIN_LETTER: {\n    name: \"SS-4 IRS EIN Confirmation Letter or W9\",\n    description: \"Official IRS documentation\",\n    required: true,\n    maxSize: 10, // MB\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  BENEFICIAL_OWNERSHIP: {\n};\n\n## Core Application Features (MUST IMPLEMENT ALL)\n\n### 1. User Registration & Authentication\n- **Registration Form**: First Name, Last Name, Email, Company Name, Password, Confirm Password\n- **Email/Password Login**: Standard authentication\n- **Role-based Access**: CLIENT (default) and ADMIN roles\n- **Session Management**: Secure session handling\n- **Password Hashing**: Use bcrypt for password security\n\n### 2. Client Dashboard Features\n- **Document Upload Interface**: Drag & drop with progress indicators\n- **Upload Progress Tracking**: Visual progress bar showing completion percentage\n- **Document Status Display**: PENDING (yellow), APPROVED (green), REJECTED (red)\n- **Rejection Feedback**: Display rejection reasons from admin\n- **File Validation**: Size limits, file type checking, error handling\n- **Re-upload Capability**: Allow replacing rejected documents\n\n### 3. Admin Dashboard Features\n- **Client List View**: All registered clients with status overview\n- **Document Review Interface**: View/download documents for review\n- **Approve/Reject Actions**: One-click approval or rejection with reason\n- **Bulk Actions**: Approve/reject multiple documents\n- **Search & Filter**: Find clients by name, company, status\n- **Activity Log**: Track admin actions and timestamps\n\n### 4. Document Management System\n- **File Upload Handling**: Server-side validation and storage\n- **Document Categories**: All 14 required document types (see DOCUMENT_REQUIREMENTS)\n- **Status Tracking**: PENDING â†’ APPROVED/REJECTED workflow\n- **File Storage**: Local file system for prototype (uploads/ directory)\n- **Download Capability**: Admins can download submitted documents\n- **Metadata Storage**: Original filename, size, upload date, etc.\n\n### 5. Notification System (Simplified for Prototype)\n- **Console Logging**: Log all email notifications that would be sent\n- **Admin Actions**: Log when documents are approved/rejected\n- **Status Updates**: Log when client uploads documents\n- **Future Email Integration**: Prepare structure for real email service\n\n## UI/UX Requirements\n\n### Design System & Branding\n- **App Name**: \"Secure2Send\" prominently displayed in header with professional logo treatment\n- **Design Style**: Modern, clean, premium SaaS application aesthetic\n- **Color Scheme**: \n  - Primary: Sophisticated blue (#2563eb) with gradients\n  - Success: Modern green (#10b981) \n  - Warning: Warm amber (#f59e0b)\n  - Error: Clean red (#ef4444)\n  - Background: Clean whites and subtle grays (#f8fafc, #f1f5f9)\n- **Typography**: Inter font for modern, professional look\n- **Shadows & Depth**: Subtle shadows and borders for card depth\n- **Animations**: Smooth micro-interactions and transitions\n- **Layout**: Spacious, breathing room, premium feel like Stripe/Linear/Notion\n\n### Premium UI Components to Implement\n```typescript\n// Use shadcn/ui components for professional look:\n// - Button variants (default, outline, ghost, link)\n// - Input with proper focus states and validation styling\n// - Card with subtle shadows and hover effects\n// - Badge for status indicators\n// - Progress bars with smooth animations\n// - Dialog/Modal for confirmations\n// - Table for admin document review\n// - Tabs for navigation\n// - Avatar for user profiles\n// - Dropdown menus with proper animations\n// - Toast notifications for feedback\n```\n\n### Key Design Features for Owner Impression\n- **Glass morphism effects** for modern card designs\n- **Smooth animations** on all interactions (hover, click, page transitions)\n- **Professional data tables** for admin with sorting, filtering\n- **Drag & drop zones** with elegant hover states and upload animations\n- **Progress indicators** with smooth transitions and celebratory completion\n- **Status badges** with appropriate colors and subtle animations\n- **Professional loading states** with skeleton screens\n- **Empty states** with helpful illustrations and clear CTAs\n- **Mobile-first responsive** that looks great on all devices\n\n### Key UI Components to Build\n```typescript\n// Premium shadcn/ui based components:\n// components/ui/* - All shadcn/ui components (Button, Input, Card, etc.)\n// components/DocumentUpload.tsx - Beautiful drag & drop with animations\n// components/DocumentList.tsx - Elegant document cards with status\n// components/AdminDocumentReview.tsx - Professional admin interface\n// components/ProgressBar.tsx - Animated progress with celebrations\n// components/Layout.tsx - Premium app layout with sidebar navigation\n// components/Header.tsx - Professional header with Secure2Send branding\n// components/Dashboard.tsx - Beautiful overview with metrics cards\n// components/StatusBadge.tsx - Elegant status indicators\n// components/FilePreview.tsx - Professional file preview modal\n// components/UserProfile.tsx - Clean user profile component\n```\n\n### Navigation Structure\n```\nHeader: Secure2Send Logo + User Menu\nâ”œâ”€â”€ Client Dashboard\nâ”‚   â”œâ”€â”€ Overview (progress summary)\nâ”‚   â””â”€â”€ Documents (upload interface)\nâ”œâ”€â”€ Admin Dashboard (admin only)\nâ”‚   â”œâ”€â”€ Clients (list all clients)\nâ”‚   â””â”€â”€ Documents (review queue)\nâ””â”€â”€ Authentication\n    â”œâ”€â”€ Login\n    â””â”€â”€ Register\n```\n\n## API Endpoints (IMPLEMENT ALL)\n\n### Authentication APIs\n```typescript\n// app/api/auth/[...nextauth]/route.ts - NextAuth configuration\n// app/api/register/route.ts - User registration endpoint\n```\n\n### Document Management APIs\n```typescript\n// app/api/documents/route.ts\n// GET: List user's documents\n// POST: Upload new document\n\n// app/api/documents/[id]/route.ts\n// GET: Download document (with authorization)\n// PUT: Update document status\n// DELETE: Remove document\n\n// app/api/admin/documents/route.ts\n// GET: List all documents for admin review\n// PUT: Bulk update document statuses\n```\n\n### Client Management APIs\n```typescript\n// app/api/clients/route.ts\n// GET: List all clients (admin only)\n\n// app/api/clients/[id]/route.ts\n// GET: Get client details and documents\n// PUT: Update client status\n```\n\n## Environment Variables (.env.local)\n```env\n# Database\nDATABASE_URL=\"file:./dev.db\"\n\n# NextAuth\nNEXTAUTH_URL=\"https://your-repl-name--username.repl.co\"\nNEXTAUTH_SECRET=\"your-secure-secret-key-here\"\n\n# File Upload\nUPLOAD_DIR=\"./uploads\"\nMAX_FILE_SIZE=\"52428800\" # 50MB in bytes\n\n# App Config\nAPP_NAME=\"Secure2Send\"\nAPP_URL=\"https://secure2send.com\"\n```\n\n## Required Dependencies (Install All)\n```bash\n# Core Next.js and React\nnpm install next@latest react react-dom typescript @types/node @types/react @types/react-dom\n\n# Database and Auth\nnpm install @prisma/client prisma next-auth @next-auth/prisma-adapter bcrypt @types/bcrypt\n\n# Forms and Validation  \nnpm install react-hook-form @hookform/resolvers zod\n\n# UI Components and Styling\nnpm install @radix-ui/react-slot @radix-ui/react-dialog @radix-ui/react-dropdown-menu\nnpm install @radix-ui/react-progress @radix-ui/react-tabs @radix-ui/react-avatar\nnpm install class-variance-authority clsx tailwind-merge\nnpm install lucide-react\n\n# File Upload and Interactions\nnpm install react-dropzone uploadthing @uploadthing/react\nnpm install framer-motion react-hot-toast\n\n# Utilities\nnpm install date-fns recharts\n\n# Development\nnpm install eslint eslint-config-next tailwindcss postcss autoprefixer\n```\n\n## shadcn/ui Setup (CRITICAL FOR PREMIUM LOOK)\n```bash\n# After creating the Next.js project:\nnpx shadcn-ui@latest init\n\n# Install required shadcn/ui components:\nnpx shadcn-ui@latest add button input card badge progress dialog table tabs avatar dropdown-menu toast\n\n# This will create components/ui/ folder with professional components\n```\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"db:generate\": \"prisma generate\",\n    \"db:push\": \"prisma db push\",\n    \"db:seed\": \"tsx prisma/seed.ts\",\n    \"db:reset\": \"prisma migrate reset --force\"\n  }\n}\n```\n\n## Package.json Scripts\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"db:generate\": \"prisma generate\",\n    \"db:push\": \"prisma db push\",\n    \"db:seed\": \"tsx prisma/seed.ts\",\n    \"db:reset\": \"prisma migrate reset --force\"\n  }\n}\n```\n\n## Premium Features for Owner Demo\n\n### 1. Stunning Landing/Login Page\n- **Hero section** with professional copy about Secure2Send\n- **Feature highlights** with icons and benefits\n- **Elegant login form** with smooth animations\n- **Trust indicators** and security badges\n\n### 2. Beautiful Dashboard Experience\n- **Metrics cards** showing completion percentage, pending documents, etc.\n- **Visual progress** with animated progress bars and completion celebrations\n- **Recent activity feed** with timeline-style updates\n- **Quick actions** with prominent CTAs\n\n### 3. Premium Document Upload Interface\n- **Drag & drop zones** with hover animations and visual feedback\n- **File preview thumbnails** for uploaded documents\n- **Upload progress** with real-time percentage and smooth animations\n- **Validation feedback** with elegant error states and success animations\n- **Document requirements checklist** with checkmarks and progress\n\n### 4. Professional Admin Interface\n- **Clean data tables** with sorting, filtering, and search\n- **Bulk actions** with checkboxes and batch operations\n- **Document preview modal** with zoom and navigation\n- **Quick approve/reject** buttons with confirmation dialogs\n- **Activity timeline** showing all admin actions\n\n### 5. Mobile-First Responsive Design\n- **Touch-friendly** interfaces for mobile upload\n- **Responsive tables** that work beautifully on small screens\n- **Mobile navigation** with slide-out menu\n- **Optimized forms** for mobile completion\n\n## File Upload Implementation (Premium Version)\n```typescript\n// Use uploadthing for professional file handling\n// Features to implement:\n// - Drag & drop with visual feedback\n// - Multiple file selection\n// - Upload progress with cancel capability\n// - File type validation with helpful messages\n// - Preview thumbnails for images/PDFs\n// - Automatic retry on failures\n// - Success animations and celebrations\n```\n\n## Seed Data for Testing\nCreate seed script (prisma/seed.ts) with:\n- **Admin User**: admin@secure2send.com / password123\n- **Test Client**: client@test.com / password123  \n- **Sample Documents**: Mock uploaded files for testing review process\n- **All Document Types**: One example of each required document type\n\n## Security Considerations (Prototype Level)\n- **Password Hashing**: bcrypt with salt rounds\n- **File Validation**: Check file types and sizes\n- **Input Sanitization**: Validate all form inputs\n- **Role-based Access**: Protect admin routes\n- **Session Security**: Secure session management\n- **File Access Control**: Only authorized users can download documents\n\n## Success Criteria\nâœ… **Registration**: New clients can create accounts\nâœ… **Document Upload**: All 14 document types can be uploaded\nâœ… **Admin Review**: Admins can approve/reject documents\nâœ… **Progress Tracking**: Visual progress indicators work\nâœ… **Responsive Design**: Works on mobile and desktop\nâœ… **File Management**: Files are stored and retrievable\nâœ… **Status Updates**: Real-time status changes reflected in UI\nâœ… **Error Handling**: Graceful error messages and recovery\n\n## Testing Checklist\n1. **User Flow**: Register â†’ Login â†’ Upload Documents â†’ View Status\n2. **Admin Flow**: Login â†’ Review Documents â†’ Approve/Reject â†’ Verify Updates\n3. **File Handling**: Upload various file types and sizes\n4. **Responsive**: Test on mobile, tablet, desktop\n5. **Error Cases**: Invalid files, network errors, authorization failures\n\n## CRITICAL IMPLEMENTATION NOTES\n\n### DO NOT:\n- Use any external UI libraries (no shadcn/ui, no Material-UI, etc.)\n- Implement real email sending (just console.log for prototype)  \n- Use external file storage services (local storage only)\n- Add complex authentication providers (email/password only)\n- Implement production-grade security features\n\n### DO:\n- Build all UI components from scratch using Tailwind\n- Use TypeScript for everything\n- Implement proper form validation with Zod\n- Create reusable components\n- Add loading states for all async operations\n- Handle errors gracefully with user-friendly messages\n- Make the interface intuitive and professional\n- Use consistent naming (Secure2Send throughout)\n\n### File Organization:\n- Keep all components in app/components/\n- Put reusable UI components in app/components/ui/\n- Use clear, descriptive filenames\n- Group related functionality together\n- Follow Next.js App Router conventions exactly\n\n## Final Notes\nThis is a working prototype that demonstrates the full application flow. Focus on creating a polished, professional interface that clearly shows how the document management system works. The admin should be able to easily review and manage documents, and clients should have a clear view of their progress through the compliance process.\n\nRemember: This app is called \"Secure2Send\" and should reflect a professional, trustworthy brand throughout the interface./pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  DRIVERS_LICENSE: {\n    name: \"Driver's License (front and back) or US Passport\",\n    description: \"Government-issued photo identification\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"image/jpeg\", \"image/png\", \"application/pdf\"]\n  },\n  CANNABIS_LICENSE: {\n    name: \"State & Local Cannabis License #'s\",\n    description: \"All relevant cannabis business licenses\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  SEED_TO_SALE_INFO: {\n    name: \"Seed-to-Sale Provider and ID\",\n    description: \"Track and trace system information\",\n    required: true,\n    maxSize: 5,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  POS_INFO: {\n    name: \"POS Provider and ID\",\n    description: \"Point of sale system information\",\n    required: true,\n    maxSize: 5,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  BANKING_INFO: {\n    name: \"Banking Information\",\n    description: \"Routing and account information\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  BANK_STATEMENTS: {\n    name: \"3 Most Recent Business Bank Statements\",\n    description: \"Full detail, minimum 1 month\",\n    required: true,\n    maxSize: 20,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  ARTICLES_OF_INCORPORATION: {\n    name: \"Articles of Incorporation\",\n    description: \"Legal business formation documents\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  OPERATING_AGREEMENT: {\n    name: \"Operating Agreement or Bylaws\",\n    description: \"If applicable to business structure\",\n    required: false,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  BUSINESS_LICENSE: {\n    name: \"Business License & State/Local Permits\",\n    description: \"As required by state law\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  VOIDED_CHECK: {\n    name: \"Voided Check or Bank Letter\",\n    description: \"On official bank letterhead\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  COA_PRODUCTS: {\n    name: \"COA's for Products You Produce\",\n    description: \"Certificate of Analysis documentation\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  PROVIDER_CONTRACT: {\n    name: \"Provider Contract\",\n    description: \"Service provider agreements\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  INSURANCE_COVERAGE: {\n    name: \"Insurance Coverage\",\n    description: \"General liability insurance\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  }\n};\n    name: \"Beneficial Ownership Details\",\n    description: \"For any owner with 20% or more ownership\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application","size_bytes":21619},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User } from \"@shared/schema\";\nimport { pool } from \"./db\";\n\ndeclare global {\n  namespace Express {\n    interface User extends User {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport async function setupAuth(app: Express) {\n  // Session setup\n  const PostgresSessionStore = connectPg(session);\n  const sessionStore = new PostgresSessionStore({\n    pool,\n    createTableIfMissing: true,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"fallback-secret-key-for-development\",\n    resave: false,\n    saveUninitialized: false,\n    store: sessionStore,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Passport Local Strategy\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: \"email\",\n        passwordField: \"password\",\n      },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, firstName, lastName, companyName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        companyName,\n        role: \"CLIENT\",\n      });\n\n      // Also create a client record for this user\n      await storage.createClient({\n        userId: user.id,\n        status: \"PENDING\",\n      });\n\n      // Log the user in\n      req.login(user, (err) => {\n        if (err) return next(err);\n        // Don't send password in response\n        const { password: _, ...userWithoutPassword } = user;\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: User | false, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        // Don't send password in response\n        const { password: _, ...userWithoutPassword } = user;\n        res.json(userWithoutPassword);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      // Destroy the session completely\n      req.session.destroy((sessionErr) => {\n        if (sessionErr) {\n          console.error(\"Session destruction error:\", sessionErr);\n        }\n        res.clearCookie('connect.sid'); // Clear the session cookie\n        res.json({ message: \"Logged out successfully\" });\n      });\n    });\n  });\n\n  app.get(\"/api/auth/user\", (req, res) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    // Don't send password in response\n    const { password: _, ...userWithoutPassword } = req.user;\n    res.json(userWithoutPassword);\n  });\n}\n\nexport const requireAuth = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n\nexport const requireAdmin = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated() || req.user?.role !== 'ADMIN') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};","size_bytes":5531},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, requireAdmin } from \"./auth\";\nimport { insertDocumentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst uploadDir = \"uploads\";\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'application/pdf',\n      'image/jpeg',\n      'image/png',\n      'image/jpg'\n    ];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only PDF, JPG, PNG files are allowed.'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes are now handled in auth.ts\n\n  // Document routes\n  app.post('/api/documents', requireAuth, upload.single('file'), async (req: any, res: Response) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'CLIENT') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const client = await storage.getClientByUserId(userId);\n      if (!client) {\n        return res.status(404).json({ message: \"Client profile not found\" });\n      }\n\n      const file = req.file;\n      const { documentType } = req.body;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const documentData = {\n        filename: file.filename,\n        originalName: file.originalname,\n        fileSize: file.size,\n        mimeType: file.mimetype,\n        filePath: file.path,\n        documentType,\n        clientId: client.id,\n        status: 'PENDING' as const,\n      };\n\n      const document = await storage.createDocument(documentData);\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(500).json({ message: \"Failed to upload document\" });\n    }\n  });\n\n  app.get('/api/documents', requireAuth, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role === 'ADMIN') {\n        const documents = await storage.getAllDocumentsForReview();\n        res.json(documents);\n      } else {\n        const client = await storage.getClientByUserId(userId);\n        if (!client) {\n          return res.status(404).json({ message: \"Client profile not found\" });\n        }\n        const documents = await storage.getDocumentsByClientId(client.id);\n        res.json(documents);\n      }\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.get('/api/documents/:id/download', requireAuth, async (req: any, res: Response) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const document = await storage.getDocumentById(id);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      // Check access permissions\n      if (user.role === 'CLIENT') {\n        const client = await storage.getClientByUserId(userId);\n        if (!client || document.clientId !== client.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      // Check if file exists\n      if (!fs.existsSync(document.filePath)) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      res.setHeader('Content-Disposition', `attachment; filename=\"${document.originalName}\"`);\n      res.setHeader('Content-Type', document.mimeType);\n      res.sendFile(path.resolve(document.filePath));\n    } catch (error) {\n      console.error(\"Error downloading document:\", error);\n      res.status(500).json({ message: \"Failed to download document\" });\n    }\n  });\n\n  app.put('/api/documents/:id/status', requireAdmin, async (req: any, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { status, rejectionReason } = req.body;\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validStatuses = ['PENDING', 'APPROVED', 'REJECTED'];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      if (status === 'REJECTED' && !rejectionReason) {\n        return res.status(400).json({ message: \"Rejection reason is required\" });\n      }\n\n      const document = await storage.updateDocumentStatus(id, status, rejectionReason);\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error updating document status:\", error);\n      res.status(500).json({ message: \"Failed to update document status\" });\n    }\n  });\n\n  app.delete('/api/documents/:id', requireAuth, async (req: any, res: Response) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const document = await storage.getDocumentById(id);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      // Check access permissions\n      if (user.role === 'CLIENT') {\n        const client = await storage.getClientByUserId(userId);\n        if (!client || document.clientId !== client.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      // Delete file from filesystem\n      if (fs.existsSync(document.filePath)) {\n        fs.unlinkSync(document.filePath);\n      }\n\n      await storage.deleteDocument(id);\n      res.json({ message: \"Document deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ message: \"Failed to delete document\" });\n    }\n  });\n\n  // Client routes\n  app.get('/api/clients', requireAdmin, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const clients = await storage.getAllClients();\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.put('/api/clients/:id/status', requireAdmin, async (req: any, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validStatuses = ['PENDING', 'APPROVED', 'REJECTED', 'INCOMPLETE'];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const client = await storage.updateClientStatus(id, status);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client status:\", error);\n      res.status(500).json({ message: \"Failed to update client status\" });\n    }\n  });\n\n  // Admin user management routes\n  app.get('/api/admin/users', requireAdmin, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Admin impersonation routes\n  app.post('/api/admin/impersonate', requireAdmin, async (req: any, res: Response) => {\n    try {\n      const { userId } = req.body;\n      const adminId = req.user.id;\n      const admin = await storage.getUser(adminId);\n\n      if (!admin || admin.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (targetUser.role !== 'CLIENT') {\n        return res.status(400).json({ message: \"Can only impersonate client users\" });\n      }\n\n      // Store original admin ID in session for returning later\n      req.session.originalAdminId = adminId;\n      req.session.isImpersonating = true;\n\n      // Update session user to impersonated user\n      req.login(targetUser, (err: any) => {\n        if (err) {\n          console.error(\"Error during impersonation login:\", err);\n          return res.status(500).json({ message: \"Failed to impersonate user\" });\n        }\n        res.json(targetUser);\n      });\n    } catch (error) {\n      console.error(\"Error impersonating user:\", error);\n      res.status(500).json({ message: \"Failed to impersonate user\" });\n    }\n  });\n\n  app.post('/api/admin/stop-impersonate', requireAuth, async (req: any, res: Response) => {\n    try {\n      if (!req.session.isImpersonating || !req.session.originalAdminId) {\n        return res.status(400).json({ message: \"Not currently impersonating\" });\n      }\n\n      const originalAdminId = req.session.originalAdminId;\n      const admin = await storage.getUser(originalAdminId);\n\n      if (!admin || admin.role !== 'ADMIN') {\n        return res.status(404).json({ message: \"Original admin not found\" });\n      }\n\n      // Clear impersonation session data\n      req.session.originalAdminId = undefined;\n      req.session.isImpersonating = false;\n\n      // Return to admin user\n      req.login(admin, (err: any) => {\n        if (err) {\n          console.error(\"Error returning to admin:\", err);\n          return res.status(500).json({ message: \"Failed to return to admin\" });\n        }\n        res.json(admin);\n      });\n    } catch (error) {\n      console.error(\"Error stopping impersonation:\", error);\n      res.status(500).json({ message: \"Failed to stop impersonation\" });\n    }\n  });\n\n  // Stats endpoint for admin dashboard\n  app.get('/api/admin/stats', requireAdmin, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const clients = await storage.getAllClients();\n      const documents = await storage.getAllDocumentsForReview();\n      \n      const stats = {\n        totalClients: clients.length,\n        pendingReview: documents.filter(d => d.status === 'PENDING').length,\n        approvedToday: documents.filter(d => \n          d.status === 'APPROVED' && \n          d.reviewedAt && \n          new Date(d.reviewedAt).toDateString() === new Date().toDateString()\n        ).length,\n        rejectedToday: documents.filter(d => \n          d.status === 'REJECTED' && \n          d.reviewedAt && \n          new Date(d.reviewedAt).toDateString() === new Date().toDateString()\n        ).length,\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12309},"server/storage.ts":{"content":"import {\n  users,\n  clients,\n  documents,\n  type User,\n  type InsertUser,\n  type Client,\n  type InsertClient,\n  type Document,\n  type InsertDocument,\n  type ClientWithUser,\n  type DocumentWithClient,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Client operations\n  getClientByUserId(userId: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  getAllClients(): Promise<ClientWithUser[]>;\n  updateClientStatus(clientId: string, status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'INCOMPLETE'): Promise<Client>;\n  \n  // Document operations\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocumentsByClientId(clientId: string): Promise<Document[]>;\n  getDocumentById(id: string): Promise<Document | undefined>;\n  getAllDocumentsForReview(): Promise<DocumentWithClient[]>;\n  updateDocumentStatus(id: string, status: 'PENDING' | 'APPROVED' | 'REJECTED', rejectionReason?: string): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Client operations\n  async getClientByUserId(userId: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.userId, userId));\n    return client;\n  }\n\n  async createClient(clientData: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(clientData).returning();\n    return client;\n  }\n\n  async getAllClients(): Promise<ClientWithUser[]> {\n    return await db\n      .select()\n      .from(clients)\n      .leftJoin(users, eq(clients.userId, users.id))\n      .then(rows => \n        rows.map(row => ({\n          ...row.clients,\n          user: row.users!,\n        }))\n      );\n  }\n\n  async updateClientStatus(clientId: string, status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'INCOMPLETE'): Promise<Client> {\n    const [client] = await db\n      .update(clients)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(clients.id, clientId))\n      .returning();\n    return client;\n  }\n\n  // Document operations\n  async createDocument(documentData: InsertDocument): Promise<Document> {\n    const [document] = await db.insert(documents).values(documentData).returning();\n    return document;\n  }\n\n  async getDocumentsByClientId(clientId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.clientId, clientId))\n      .orderBy(desc(documents.uploadedAt));\n  }\n\n  async getDocumentById(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document;\n  }\n\n  async getAllDocumentsForReview(): Promise<DocumentWithClient[]> {\n    return await db\n      .select()\n      .from(documents)\n      .leftJoin(clients, eq(documents.clientId, clients.id))\n      .leftJoin(users, eq(clients.userId, users.id))\n      .orderBy(desc(documents.uploadedAt))\n      .then(rows =>\n        rows.map(row => ({\n          ...row.documents,\n          client: {\n            ...row.clients!,\n            user: row.users!,\n          },\n        }))\n      );\n  }\n\n  async updateDocumentStatus(\n    id: string,\n    status: 'PENDING' | 'APPROVED' | 'REJECTED',\n    rejectionReason?: string\n  ): Promise<Document> {\n    const [document] = await db\n      .update(documents)\n      .set({\n        status,\n        rejectionReason: rejectionReason || null,\n        reviewedAt: new Date(),\n      })\n      .where(eq(documents.id, id))\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4574},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  pgEnum,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['ADMIN', 'CLIENT']);\nexport const clientStatusEnum = pgEnum('client_status', ['PENDING', 'APPROVED', 'REJECTED', 'INCOMPLETE']);\nexport const documentTypeEnum = pgEnum('document_type', [\n  'SS4_EIN_LETTER',\n  'W9',\n  'BENEFICIAL_OWNERSHIP',\n  'DRIVERS_LICENSE',\n  'PASSPORT',\n  'CANNABIS_LICENSE',\n  'SEED_TO_SALE_INFO',\n  'POS_INFO',\n  'BANKING_INFO',\n  'BANK_STATEMENTS',\n  'ARTICLES_OF_INCORPORATION',\n  'OPERATING_AGREEMENT',\n  'BUSINESS_LICENSE',\n  'VOIDED_CHECK',\n  'COA_PRODUCTS',\n  'PROVIDER_CONTRACT',\n  'INSURANCE_COVERAGE'\n]);\nexport const documentStatusEnum = pgEnum('document_status', ['PENDING', 'APPROVED', 'REJECTED']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  companyName: varchar(\"company_name\"),\n  role: userRoleEnum(\"role\").default('CLIENT'),\n  emailVerified: boolean(\"email_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  status: clientStatusEnum(\"status\").default('PENDING'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Documents table\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: varchar(\"filename\").notNull(),\n  originalName: varchar(\"original_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  documentType: documentTypeEnum(\"document_type\").notNull(),\n  status: documentStatusEnum(\"status\").default('PENDING'),\n  rejectionReason: text(\"rejection_reason\"),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  clients: many(clients),\n}));\n\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  user: one(users, {\n    fields: [clients.userId],\n    references: [users.id],\n  }),\n  documents: many(documents),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  client: one(clients, {\n    fields: [documents.clientId],\n    references: [clients.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  emailVerified: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n  reviewedAt: true,\n});\n\n// Types\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Schema for user login  \nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Document = typeof documents.$inferSelect;\n\n// Combined types\nexport type ClientWithUser = Client & { user: User };\nexport type DocumentWithClient = Document & { client: ClientWithUser };\n","size_bytes":4448},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport Documents from \"@/pages/documents\";\nimport Activity from \"@/pages/activity\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/documents\" component={Documents} />\n          <Route path=\"/activity\" component={Activity} />\n          {user?.role === 'ADMIN' && (\n            <>\n              <Route path=\"/admin\" component={Admin} />\n              <Route path=\"/admin/documents\" component={Admin} />\n            </>\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1996},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(213, 83%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(60, 9.1%, 97.8%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(213, 83%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 98%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-success {\n    color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .border-success {\n    border-color: var(--success);\n  }\n  \n  .border-warning {\n    border-color: var(--warning);\n  }\n}\n\n/* Custom animations and effects */\n.hover-lift {\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n}\n\n.glass-effect {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Loading animation */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n","size_bytes":2905},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthUser extends User {\n  clientId?: string;\n  clientStatus?: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<AuthUser | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      \n      if (res.status === 401) {\n        return null;\n      }\n      \n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      \n      return await res.json();\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    user: user || undefined,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":825},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/constants.ts":{"content":"export const DOCUMENT_TYPES = {\n  SS4_EIN_LETTER: {\n    name: \"SS-4 IRS EIN Confirmation Letter or W9\",\n    description: \"Official IRS documentation showing your business EIN number\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  W9: {\n    name: \"W9 Form\", \n    description: \"IRS Form W-9 for tax reporting purposes\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  BENEFICIAL_OWNERSHIP: {\n    name: \"Beneficial Ownership Details\",\n    description: \"For any owner with 20% or more ownership\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  DRIVERS_LICENSE: {\n    name: \"Driver's License (front and back) or US Passport\",\n    description: \"Government-issued photo identification\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"image/jpeg\", \"image/png\", \"application/pdf\"]\n  },\n  PASSPORT: {\n    name: \"US Passport\",\n    description: \"Valid US passport as government ID\",\n    required: false,\n    maxSize: 10,\n    acceptedTypes: [\"image/jpeg\", \"image/png\", \"application/pdf\"]\n  },\n  CANNABIS_LICENSE: {\n    name: \"State & Local Cannabis License #'s\",\n    description: \"All relevant cannabis business licenses\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  SEED_TO_SALE_INFO: {\n    name: \"Seed-to-Sale Provider and ID\",\n    description: \"Track and trace system information\",\n    required: true,\n    maxSize: 5,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  POS_INFO: {\n    name: \"POS Provider and ID\",\n    description: \"Point of sale system information\",\n    required: true,\n    maxSize: 5,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  BANKING_INFO: {\n    name: \"Banking Information\",\n    description: \"Routing and account information\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  BANK_STATEMENTS: {\n    name: \"3 Most Recent Business Bank Statements\",\n    description: \"Full detail, minimum 1 month\",\n    required: true,\n    maxSize: 20,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  ARTICLES_OF_INCORPORATION: {\n    name: \"Articles of Incorporation\",\n    description: \"Legal business formation documents\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  OPERATING_AGREEMENT: {\n    name: \"Operating Agreement or Bylaws\",\n    description: \"If applicable to business structure\",\n    required: false,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  BUSINESS_LICENSE: {\n    name: \"Business License & State/Local Permits\",\n    description: \"As required by state law\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  VOIDED_CHECK: {\n    name: \"Voided Check or Bank Letter\",\n    description: \"On official bank letterhead\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\", \"image/jpeg\", \"image/png\"]\n  },\n  COA_PRODUCTS: {\n    name: \"COA's for Products You Produce\",\n    description: \"Certificate of Analysis documentation\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  PROVIDER_CONTRACT: {\n    name: \"Provider Contract\",\n    description: \"Service provider agreements\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  },\n  INSURANCE_COVERAGE: {\n    name: \"Insurance Coverage\",\n    description: \"General liability insurance\",\n    required: true,\n    maxSize: 10,\n    acceptedTypes: [\"application/pdf\"]\n  }\n};\n","size_bytes":3691},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  let headers: Record<string, string> = {};\n  let body: string | FormData | undefined;\n\n  if (data instanceof FormData) {\n    // For FormData, don't set Content-Type - let browser set it with boundary\n    body = data;\n  } else if (data) {\n    // For regular JSON data\n    headers[\"Content-Type\"] = \"application/json\";\n    body = JSON.stringify(data);\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1646},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/activity.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { MobileSidebar } from \"@/components/layout/mobile-sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  FileText, \n  Upload, \n  Clock, \n  CheckCircle, \n  XCircle, \n  AlertCircle,\n  Search,\n  Filter,\n  Calendar,\n  User,\n  MessageSquare\n} from \"lucide-react\";\n\ninterface ActivityItem {\n  id: string;\n  type: 'UPLOAD' | 'REVIEW' | 'APPROVAL' | 'REJECTION' | 'REVISION_REQUEST';\n  documentId: string;\n  documentName: string;\n  documentType: string;\n  timestamp: string;\n  user: string;\n  status?: string;\n  message?: string;\n}\n\nexport default function ActivityPage() {\n  const { user } = useAuth();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [filterDate, setFilterDate] = useState(\"all\");\n\n  const { data: documents = [] } = useQuery<any[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  // Generate activity feed from documents\n  const generateActivityFeed = (): ActivityItem[] => {\n    const activities: ActivityItem[] = [];\n\n    documents.forEach(doc => {\n      // Add upload activity\n      activities.push({\n        id: `upload-${doc.id}`,\n        type: 'UPLOAD',\n        documentId: doc.id,\n        documentName: doc.originalName,\n        documentType: doc.documentType,\n        timestamp: doc.uploadedAt,\n        user: user?.email || 'Unknown',\n        status: doc.status\n      });\n\n      // Add review activity if reviewed\n      if (doc.reviewedAt) {\n        activities.push({\n          id: `review-${doc.id}`,\n          type: doc.status === 'APPROVED' ? 'APPROVAL' : \n                doc.status === 'REJECTED' ? 'REJECTION' : 'REVIEW',\n          documentId: doc.id,\n          documentName: doc.originalName,\n          documentType: doc.documentType,\n          timestamp: doc.reviewedAt,\n          user: doc.reviewedBy || 'Admin',\n          status: doc.status,\n          message: doc.reviewNotes\n        });\n      }\n    });\n\n    return activities.sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  };\n\n  const activityFeed = generateActivityFeed();\n\n  // Filter activities\n  const filteredActivities = activityFeed.filter(activity => {\n    const matchesSearch = activity.documentName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         activity.documentType.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterType === \"all\" || activity.type === filterType;\n    \n    const now = new Date();\n    const activityDate = new Date(activity.timestamp);\n    let matchesDate = true;\n    \n    if (filterDate === \"today\") {\n      matchesDate = activityDate.toDateString() === now.toDateString();\n    } else if (filterDate === \"week\") {\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      matchesDate = activityDate >= weekAgo;\n    } else if (filterDate === \"month\") {\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      matchesDate = activityDate >= monthAgo;\n    }\n\n    return matchesSearch && matchesType && matchesDate;\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'UPLOAD':\n        return <Upload className=\"h-4 w-4\" />;\n      case 'APPROVAL':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'REJECTION':\n        return <XCircle className=\"h-4 w-4\" />;\n      case 'REVISION_REQUEST':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'REVIEW':\n        return <MessageSquare className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'UPLOAD':\n        return 'bg-blue-100 text-blue-800';\n      case 'APPROVAL':\n        return 'bg-green-100 text-green-800';\n      case 'REJECTION':\n        return 'bg-red-100 text-red-800';\n      case 'REVISION_REQUEST':\n        return 'bg-orange-100 text-orange-800';\n      case 'REVIEW':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getActivityDescription = (activity: ActivityItem) => {\n    switch (activity.type) {\n      case 'UPLOAD':\n        return `uploaded ${activity.documentType} document`;\n      case 'APPROVAL':\n        return `approved ${activity.documentType} document`;\n      case 'REJECTION':\n        return `rejected ${activity.documentType} document`;\n      case 'REVISION_REQUEST':\n        return `requested revision for ${activity.documentType} document`;\n      case 'REVIEW':\n        return `reviewed ${activity.documentType} document`;\n      default:\n        return `interacted with ${activity.documentType} document`;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Mobile Sidebar */}\n      <MobileSidebar />\n      \n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:block\">\n        <Sidebar \n          isCollapsed={sidebarCollapsed} \n          onToggle={() => setSidebarCollapsed(!sidebarCollapsed)} \n        />\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Activity Timeline\"\n          subtitle=\"Track all document activities and reviews\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-6\">\n          {/* Activity Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Activities</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{activityFeed.length}</p>\n                  </div>\n                  <Calendar className=\"h-8 w-8 text-gray-400\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Documents Uploaded</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {activityFeed.filter(a => a.type === 'UPLOAD').length}\n                    </p>\n                  </div>\n                  <Upload className=\"h-8 w-8 text-blue-400\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Reviews Completed</p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {activityFeed.filter(a => ['APPROVAL', 'REJECTION', 'REVIEW'].includes(a.type)).length}\n                    </p>\n                  </div>\n                  <CheckCircle className=\"h-8 w-8 text-green-400\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">This Week</p>\n                    <p className=\"text-2xl font-bold text-purple-600\">\n                      {activityFeed.filter(a => {\n                        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                        return new Date(a.timestamp) >= weekAgo;\n                      }).length}\n                    </p>\n                  </div>\n                  <Calendar className=\"h-8 w-8 text-purple-400\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search documents...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"Activity type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Activities</SelectItem>\n                    <SelectItem value=\"UPLOAD\">Uploads</SelectItem>\n                    <SelectItem value=\"APPROVAL\">Approvals</SelectItem>\n                    <SelectItem value=\"REJECTION\">Rejections</SelectItem>\n                    <SelectItem value=\"REVIEW\">Reviews</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={filterDate} onValueChange={setFilterDate}>\n                  <SelectTrigger className=\"w-[150px]\">\n                    <SelectValue placeholder=\"Time period\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Time</SelectItem>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Activity Feed */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Activity Timeline</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {filteredActivities.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {filteredActivities.map((activity) => (\n                    <div key={activity.id} className=\"flex items-start space-x-4 p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                      <div className={`flex items-center justify-center w-8 h-8 rounded-full ${getActivityColor(activity.type)}`}>\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            <span className=\"capitalize\">{activity.user}</span>{' '}\n                            {getActivityDescription(activity)}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {format(new Date(activity.timestamp), 'MMM d, yyyy h:mm a')}\n                          </p>\n                        </div>\n                        \n                        <p className=\"text-sm text-gray-600 truncate mt-1\">\n                          {activity.documentName}\n                        </p>\n                        \n                        {activity.message && (\n                          <div className=\"mt-2 p-2 bg-gray-100 rounded text-sm text-gray-700\">\n                            <MessageSquare className=\"h-3 w-3 inline mr-1\" />\n                            {activity.message}\n                          </div>\n                        )}\n                        \n                        {activity.status && (\n                          <Badge className={`mt-2 ${getActivityColor(activity.status)}`}>\n                            {activity.status.replace('_', ' ')}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No activities found matching your criteria</p>\n                  {(searchTerm || filterType !== \"all\" || filterDate !== \"all\") && (\n                    <Button \n                      variant=\"outline\" \n                      className=\"mt-4\"\n                      onClick={() => {\n                        setSearchTerm(\"\");\n                        setFilterType(\"all\");\n                        setFilterDate(\"all\");\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13653},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { MobileSidebar } from \"@/components/layout/mobile-sidebar\";\nimport Header from \"@/components/layout/header\";\nimport AdminStats from \"@/components/admin/admin-stats\";\nimport ReviewQueue from \"@/components/admin/review-queue\";\n\nexport default function Admin() {\n  const [location] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading || !isAuthenticated || user?.role !== 'ADMIN') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Mobile Sidebar */}\n      <MobileSidebar />\n      \n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:block\">\n        <Sidebar \n          isCollapsed={sidebarCollapsed} \n          onToggle={() => setSidebarCollapsed(!sidebarCollapsed)} \n        />\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title={location === '/admin/documents' ? \"Document Review\" : \"Admin Dashboard\"}\n          subtitle={location === '/admin/documents' ? \"Review and approve client documents\" : \"Review and manage client documents\"}\n        />\n        \n        <main className=\"flex-1 overflow-auto p-6\">\n          {location === '/admin/documents' ? (\n            <ReviewQueue />\n          ) : (\n            <>\n              <AdminStats />\n              <ReviewQueue />\n            </>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2414},"client/src/pages/documents.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { MobileSidebar } from \"@/components/layout/mobile-sidebar\";\nimport Header from \"@/components/layout/header\";\nimport DocumentUpload from \"@/components/documents/document-upload\";\nimport DocumentList from \"@/components/documents/document-list\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Upload, Clock, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\n\ninterface Document {\n  id: string;\n  originalName: string;\n  documentType: string;\n  status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'NEEDS_REVISION';\n  uploadedAt: string;\n  reviewedAt?: string;\n  reviewedBy?: string;\n  reviewNotes?: string;\n}\n\nexport default function DocumentsPage() {\n  const { user } = useAuth();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  \n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  // Group documents by status\n  const documentsByStatus = {\n    pending: documents.filter(doc => doc.status === 'PENDING'),\n    approved: documents.filter(doc => doc.status === 'APPROVED'),\n    rejected: documents.filter(doc => doc.status === 'REJECTED'),\n    needsRevision: documents.filter(doc => doc.status === 'NEEDS_REVISION'),\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'APPROVED':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'REJECTED':\n        return <XCircle className=\"h-4 w-4\" />;\n      case 'NEEDS_REVISION':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'APPROVED':\n        return 'bg-green-100 text-green-800';\n      case 'REJECTED':\n        return 'bg-red-100 text-red-800';\n      case 'NEEDS_REVISION':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Mobile Sidebar */}\n      <MobileSidebar />\n      \n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:block\">\n        <Sidebar \n          isCollapsed={sidebarCollapsed} \n          onToggle={() => setSidebarCollapsed(!sidebarCollapsed)} \n        />\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Document Management\"\n          subtitle=\"Upload and track your compliance documents\"\n        />\n        \n        <main className=\"flex-1 overflow-auto\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8 p-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Documents</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{documents.length}</p>\n                  </div>\n                  <FileText className=\"h-8 w-8 text-gray-400\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Pending Review</p>\n                    <p className=\"text-2xl font-bold text-yellow-600\">{documentsByStatus.pending.length}</p>\n                  </div>\n                  <Clock className=\"h-8 w-8 text-yellow-400\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Approved</p>\n                    <p className=\"text-2xl font-bold text-green-600\">{documentsByStatus.approved.length}</p>\n                  </div>\n                  <CheckCircle className=\"h-8 w-8 text-green-400\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Need Action</p>\n                    <p className=\"text-2xl font-bold text-red-600\">\n                      {documentsByStatus.rejected.length + documentsByStatus.needsRevision.length}\n                    </p>\n                  </div>\n                  <AlertCircle className=\"h-8 w-8 text-red-400\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"px-6 flex-1 flex flex-col\">\n            <Tabs defaultValue=\"upload\" className=\"space-y-6 flex-1 flex flex-col\">\n            <TabsList>\n              <TabsTrigger value=\"upload\" className=\"flex items-center gap-2\">\n                <Upload className=\"h-4 w-4\" />\n                Upload Documents\n              </TabsTrigger>\n              <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                All Documents\n              </TabsTrigger>\n              <TabsTrigger value=\"pending\" className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                Pending ({documentsByStatus.pending.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"approved\" className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4\" />\n                Approved ({documentsByStatus.approved.length})\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"upload\" className=\"flex-1 p-0 -mx-6 -mb-6 h-full\">\n              <DocumentUpload />\n            </TabsContent>\n\n            <TabsContent value=\"all\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>All Documents</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <DocumentList />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"pending\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5 text-yellow-500\" />\n                    Pending Review\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {documentsByStatus.pending.length > 0 ? (\n                    <DocumentList />\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No documents pending review</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"approved\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    Approved Documents\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {documentsByStatus.approved.length > 0 ? (\n                    <DocumentList />\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <CheckCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No approved documents yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":8635},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { MobileSidebar } from \"@/components/layout/mobile-sidebar\";\nimport Header from \"@/components/layout/header\";\nimport ProgressCards from \"@/components/dashboard/progress-cards\";\nimport DocumentUpload from \"@/components/documents/document-upload\";\nimport DocumentList from \"@/components/documents/document-list\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Mobile Sidebar */}\n      <MobileSidebar />\n      \n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:block\">\n        <Sidebar \n          isCollapsed={sidebarCollapsed} \n          onToggle={() => setSidebarCollapsed(!sidebarCollapsed)} \n        />\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Client Dashboard\"\n          subtitle=\"Manage your compliance documents\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-6\">\n          <ProgressCards />\n          \n          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8 mb-8\">\n            <DocumentUpload />\n          </div>\n          \n          <DocumentList />\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2351},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, FileCheck, Users, Clock, ArrowRight } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-sm border-b border-white/20 sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Shield className=\"h-8 w-8 text-primary mr-3\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Secure2Send</h1>\n                <p className=\"text-xs text-gray-500\">Compliance Platform</p>\n              </div>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button \n                onClick={() => window.location.href = '/login'}\n                variant=\"outline\"\n                className=\"border-primary text-primary hover:bg-primary hover:text-white\"\n              >\n                Sign In\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/signup'}\n                className=\"bg-primary hover:bg-blue-700\"\n              >\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6\">\n            Cannabis Compliance\n            <span className=\"block text-primary\">Made Simple</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            Streamline your cannabis business compliance document submission and approval process with our secure, professional platform.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\"\n              onClick={() => window.location.href = '/signup'}\n              className=\"bg-primary hover:bg-blue-700 text-lg px-8 py-4\"\n            >\n              Get Started Today\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => window.location.href = '/login'}\n              className=\"border-2 border-primary text-primary hover:bg-primary hover:text-white text-lg px-8 py-4\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            Why Choose Secure2Send?\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Secure Platform</h3>\n                <p className=\"text-gray-600\">Bank-level security for all your sensitive compliance documents</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <FileCheck className=\"h-6 w-6 text-success\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Easy Upload</h3>\n                <p className=\"text-gray-600\">Drag & drop interface for quick and easy document submission</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Expert Review</h3>\n                <p className=\"text-gray-600\">Professional compliance experts review your submissions</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Clock className=\"h-6 w-6 text-warning\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Fast Processing</h3>\n                <p className=\"text-gray-600\">Quick turnaround times to keep your business moving</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-white/50\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Streamline Your Compliance?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Join hundreds of cannabis businesses who trust Secure2Send with their compliance needs.\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/signup'}\n            className=\"bg-primary hover:bg-blue-700 text-lg px-8 py-4\"\n          >\n            Start Your Account\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-200 py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Shield className=\"h-6 w-6 text-primary mr-2\" />\n            <span className=\"text-lg font-semibold text-gray-900\">Secure2Send</span>\n          </div>\n          <p className=\"text-gray-600\">\n            Â© 2024 Secure2Send. Professional cannabis compliance document management.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6800},"client/src/pages/login.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Shield, Eye, EyeOff, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\n\nexport default function Login() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back to Secure2Send!\",\n      });\n      navigate(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && isAuthenticated) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, isLoading, navigate]);\n\n  const onSubmit = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex flex-col items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo and Header */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Shield className=\"h-12 w-12 text-primary mr-3\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Secure2Send</h1>\n          </div>\n          <p className=\"text-gray-600\">\n            Cannabis Compliance Document Management\n          </p>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"bg-white shadow-xl border-0\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl text-center\">Welcome Back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to access your compliance dashboard\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Features List */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-3\" />\n                Secure document upload and storage\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-3\" />\n                Real-time compliance tracking\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-3\" />\n                Admin review and approval system\n              </div>\n            </div>\n\n            {/* Login Form */}\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"Enter your email\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  disabled={loginMutation.isPending}\n                  className=\"w-full bg-primary hover:bg-primary/90 text-white py-3 text-lg font-medium\"\n                  size=\"lg\"\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            {/* Signup Link */}\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Don't have an account?{\" \"}\n                <Link href=\"/signup\" className=\"text-primary hover:underline font-medium\">\n                  Create one here\n                </Link>\n              </p>\n            </div>\n\n            {/* Info Text */}\n            <p className=\"text-xs text-gray-500 text-center\">\n              By signing in, you agree to our Terms of Service and Privacy Policy\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Additional Info */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Need help? Contact support at{\" \"}\n            <a href=\"mailto:support@secure2send.com\" className=\"text-primary hover:underline\">\n              support@secure2send.com\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7508},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/signup.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Users, FileCheck, Clock, Lock, Eye, EyeOff } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Extended schema for signup form\nconst signupSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SignupData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      companyName: \"\",\n      role: \"CLIENT\",\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupData) => {\n      const { confirmPassword, ...userData } = data;\n      const response = await apiRequest(\"POST\", \"/api/register\", userData);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      toast({\n        title: \"Account Created Successfully\",\n        description: \"Welcome to Secure2Send! Your account is ready.\",\n      });\n      navigate(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && isAuthenticated) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, isLoading, navigate]);\n\n  const onSubmit = (data: SignupData) => {\n    signupMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex flex-col items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl space-y-8\">\n        {/* Logo and Header */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Shield className=\"h-12 w-12 text-primary mr-3\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Secure2Send</h1>\n          </div>\n          <p className=\"text-xl text-gray-600 mb-2\">\n            Cannabis Compliance Document Management\n          </p>\n          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n            Trusted by Cannabis Businesses Nationwide\n          </Badge>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8 items-start\">\n          {/* Features Section */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n              Streamline Your Compliance Process\n            </h2>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <FileCheck className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Document Management</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Upload and manage all 17 required compliance documents in one secure platform\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Clock className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Real-time Tracking</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Monitor approval status and get instant notifications on document reviews\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Users className=\"h-5 w-5 text-purple-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Admin Dashboard</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Dedicated review system for administrators to approve or request changes\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Lock className=\"h-5 w-5 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Bank-Level Security</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Your sensitive compliance documents are protected with enterprise-grade encryption\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Signup Card */}\n          <Card className=\"bg-white shadow-xl border-0\">\n            <CardHeader className=\"space-y-1\">\n              <CardTitle className=\"text-2xl text-center\">Get Started Today</CardTitle>\n              <CardDescription className=\"text-center\">\n                Join cannabis businesses already using Secure2Send\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Signup Form */}\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"John\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Doe\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"email\" \n                            placeholder=\"john@example.com\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"companyName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Company Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Your Cannabis Business\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input \n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Create a secure password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowPassword(!showPassword)}\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Confirm Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input \n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              placeholder=\"Confirm your password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            >\n                              {showConfirmPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    disabled={signupMutation.isPending}\n                    className=\"w-full bg-primary hover:bg-primary/90 text-white py-3 text-lg font-medium\"\n                    size=\"lg\"\n                  >\n                    {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </Form>\n\n              {/* Login Link */}\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">\n                  Already have an account?{\" \"}\n                  <Link href=\"/login\" className=\"text-primary hover:underline font-medium\">\n                    Sign in here\n                  </Link>\n                </p>\n              </div>\n\n              {/* Info Text */}\n              <p className=\"text-xs text-gray-500 text-center\">\n                By creating an account, you agree to our Terms of Service and Privacy Policy\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bottom CTA */}\n        <div className=\"text-center bg-white rounded-lg p-6 shadow-sm\">\n          <p className=\"text-sm text-gray-600 mb-2\">\n            Questions about compliance requirements?\n          </p>\n          <p className=\"text-sm\">\n            Contact our compliance experts at{\" \"}\n            <a href=\"mailto:compliance@secure2send.com\" className=\"text-primary hover:underline\">\n              compliance@secure2send.com\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13943},"client/src/components/admin/admin-stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Clock, CheckCircle, XCircle } from \"lucide-react\";\n\ninterface AdminStats {\n  totalClients: number;\n  pendingReview: number;\n  approvedToday: number;\n  rejectedToday: number;\n}\n\nexport default function AdminStats() {\n  const { data: stats, isLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 text-sm\">Total Clients</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{stats?.totalClients || 0}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <Users className=\"h-6 w-6 text-primary\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 text-sm\">Pending Review</p>\n              <p className=\"text-2xl font-bold text-warning\">{stats?.pendingReview || 0}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <Clock className=\"h-6 w-6 text-warning\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 text-sm\">Approved Today</p>\n              <p className=\"text-2xl font-bold text-success\">{stats?.approvedToday || 0}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-success\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-600 text-sm\">Rejected Today</p>\n              <p className=\"text-2xl font-bold text-destructive\">{stats?.rejectedToday || 0}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <XCircle className=\"h-6 w-6 text-destructive\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3396},"client/src/components/admin/review-queue.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DOCUMENT_TYPES } from \"@/lib/constants\";\nimport DocumentReviewModal from \"../documents/document-review-modal\";\nimport { Eye, CheckCircle, XCircle, Download, FileText, Filter } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { DocumentWithClient } from \"@shared/schema\";\n\nexport default function ReviewQueue() {\n  const [selectedDocument, setSelectedDocument] = useState<DocumentWithClient | null>(null);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [clientFilter, setClientFilter] = useState(\"all\");\n\n  const { data: documents = [], isLoading } = useQuery<DocumentWithClient[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  // Get unique clients for the filter dropdown\n  const uniqueClients = documents.reduce((acc: any[], doc) => {\n    const existingClient = acc.find(client => client.id === doc.client.id);\n    if (!existingClient && doc.client) {\n      acc.push(doc.client);\n    }\n    return acc;\n  }, []);\n\n  const filteredDocuments = documents.filter((doc) => {\n    const statusMatch = statusFilter === \"all\" || doc.status === statusFilter.toUpperCase();\n    const clientMatch = clientFilter === \"all\" || doc.client.id === clientFilter;\n    return statusMatch && clientMatch;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'APPROVED':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n            Approved\n          </Badge>\n        );\n      case 'PENDING':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n            Pending\n          </Badge>\n        );\n      case 'REJECTED':\n        return (\n          <Badge className=\"bg-red-100 text-red-800 border-red-200\">\n            Rejected\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getDocumentTypeName = (type: string) => {\n    return DOCUMENT_TYPES[type as keyof typeof DOCUMENT_TYPES]?.name || type;\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    if (!firstName && !lastName) return \"U\";\n    return `${firstName?.[0] || \"\"}${lastName?.[0] || \"\"}`.toUpperCase();\n  };\n\n  const getClientDisplayName = (client: any) => {\n    if (!client?.user) return 'Unknown Client';\n    const { firstName, lastName, companyName, email } = client.user;\n    if (companyName) return companyName;\n    if (firstName || lastName) return `${firstName || ''} ${lastName || ''}`.trim();\n    return email || 'Unknown Client';\n  };\n\n  const handleDownload = async (document: any) => {\n    try {\n      const response = await fetch(`/api/documents/${document.id}/download`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = document.originalName;\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n    } catch (error) {\n      console.error('Download error:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"space-y-3\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">Document Review Queue</h3>\n            <div className=\"flex items-center space-x-3\">\n              <Select value={clientFilter} onValueChange={setClientFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by client\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Clients</SelectItem>\n                  {uniqueClients.map((client) => (\n                    <SelectItem key={client.id} value={client.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <Avatar className=\"h-4 w-4\">\n                          <AvatarFallback className=\"text-xs\">\n                            {getInitials(client.user?.firstName, client.user?.lastName)}\n                          </AvatarFallback>\n                        </Avatar>\n                        {getClientDisplayName(client)}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Documents</SelectItem>\n                  <SelectItem value=\"pending\">Pending Only</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" className=\"border-primary text-primary hover:bg-blue-50\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {filteredDocuments.length === 0 ? (\n          <CardContent className=\"p-6 text-center\">\n            <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-gray-900 mb-2\">No documents found</h4>\n            <p className=\"text-gray-600\">\n              {statusFilter === \"all\" ? \n                \"No documents have been uploaded yet.\" : \n                `No ${statusFilter} documents found.`\n              }\n            </p>\n          </CardContent>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Client\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Document\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Type\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Uploaded\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredDocuments.map((document: any) => (\n                  <tr key={document.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <Avatar className=\"h-8 w-8 mr-3\">\n                          <AvatarImage src={document.client?.user?.profileImageUrl} />\n                          <AvatarFallback className=\"bg-primary text-white text-sm\">\n                            {getInitials(document.client?.user?.firstName, document.client?.user?.lastName)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {document.client?.user?.firstName} {document.client?.user?.lastName}\n                          </div>\n                          {document.client?.user?.companyName && (\n                            <div className=\"text-sm text-gray-500\">\n                              {document.client.user.companyName}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <FileText className=\"h-4 w-4 text-primary mr-2\" />\n                        <span className=\"text-sm text-gray-900\">{document.originalName}</span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {getDocumentTypeName(document.documentType)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {formatDistanceToNow(new Date(document.uploadedAt), { addSuffix: true })}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getStatusBadge(document.status)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedDocument(document)}\n                          className=\"text-primary hover:text-blue-700\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDownload(document)}\n                          className=\"text-gray-400 hover:text-gray-600\"\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </Card>\n\n      {selectedDocument && (\n        <DocumentReviewModal\n          document={selectedDocument}\n          isOpen={!!selectedDocument}\n          onClose={() => setSelectedDocument(null)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":11510},"client/src/components/dashboard/progress-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart3, CheckCircle, Clock } from \"lucide-react\";\nimport type { Document } from \"@shared/schema\";\n\nexport default function ProgressCards() {\n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  const totalDocuments = 14; // Based on the required document types\n  const uploadedCount = documents.length;\n  const approvedCount = documents.filter((doc) => doc.status === 'APPROVED').length;\n  const pendingCount = documents.filter((doc) => doc.status === 'PENDING').length;\n  const rejectedCount = documents.filter((doc) => doc.status === 'REJECTED').length;\n  const progressPercentage = Math.round((uploadedCount / totalDocuments) * 100);\n\n  // Get remaining document types (simplified for demo)\n  const remainingDocuments = [\n    \"Cannabis License\",\n    \"Operating Agreement\", \n    \"Insurance Coverage\"\n  ].slice(0, Math.max(0, 3 - (uploadedCount - 11))); // Show some remaining docs\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Upload Progress</h3>\n            <BarChart3 className=\"h-5 w-5 text-primary\" />\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Documents Uploaded</span>\n              <span className=\"font-medium\">{uploadedCount} of {totalDocuments}</span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" />\n            <p className=\"text-sm text-gray-500\">{progressPercentage}% Complete</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Approval Status</h3>\n            <CheckCircle className=\"h-5 w-5 text-success\" />\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-success text-sm\">Approved</span>\n              <span className=\"font-medium\">{approvedCount}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-warning text-sm\">Pending</span>\n              <span className=\"font-medium\">{pendingCount}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-destructive text-sm\">Rejected</span>\n              <span className=\"font-medium\">{rejectedCount}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Next Steps</h3>\n            <Clock className=\"h-5 w-5 text-warning\" />\n          </div>\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600\">Upload remaining:</p>\n            <ul className=\"text-sm space-y-1\">\n              {remainingDocuments.length > 0 ? (\n                remainingDocuments.map((doc, index) => (\n                  <li key={index} className=\"text-gray-700\">â€¢ {doc}</li>\n                ))\n              ) : (\n                <li className=\"text-green-700\">â€¢ All documents uploaded!</li>\n              )}\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3946},"client/src/components/documents/document-list.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DOCUMENT_TYPES } from \"@/lib/constants\";\nimport DocumentReviewModal from \"./document-review-modal\";\nimport { FileText, Download, Eye, RotateCcw, Trash2 } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Document } from \"@shared/schema\";\n\nexport default function DocumentList() {\n  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: documents = [], isLoading } = useQuery<Document[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/documents/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Document deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDownload = async (document: Document) => {\n    try {\n      const response = await fetch(`/api/documents/${document.id}/download`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = document.originalName;\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Unable to download the document.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'APPROVED':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n            Approved\n          </Badge>\n        );\n      case 'PENDING':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n            Pending\n          </Badge>\n        );\n      case 'REJECTED':\n        return (\n          <Badge className=\"bg-red-100 text-red-800 border-red-200\">\n            Rejected\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\">\n            {status}\n          </Badge>\n        );\n    }\n  };\n\n  const getDocumentTypeName = (type: string) => {\n    return DOCUMENT_TYPES[type as keyof typeof DOCUMENT_TYPES]?.name || type;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"hover:shadow-lg transition-shadow\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-xl font-semibold text-gray-900\">Your Documents</h3>\n        </div>\n        \n        {documents.length === 0 ? (\n          <CardContent className=\"p-6 text-center\">\n            <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-gray-900 mb-2\">No documents uploaded</h4>\n            <p className=\"text-gray-600\">Upload your first compliance document to get started.</p>\n          </CardContent>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {documents.map((document) => (\n              <div key={document.id} className=\"p-6 hover:bg-gray-50 transition-colors\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <FileText className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{document.originalName}</h4>\n                      <p className=\"text-sm text-gray-500\">\n                        {getDocumentTypeName(document.documentType)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    {getStatusBadge(document.status)}\n                    <span className=\"text-sm text-gray-500\">\n                      {formatDistanceToNow(new Date(document.uploadedAt), { addSuffix: true })}\n                    </span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setSelectedDocument(document)}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDownload(document)}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      {document.status === 'REJECTED' && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {/* Handle re-upload */}}\n                          className=\"text-blue-500 hover:text-blue-700\"\n                        >\n                          <RotateCcw className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(document.id)}\n                        disabled={deleteMutation.isPending}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Rejection Reason */}\n                {document.status === 'REJECTED' && document.rejectionReason && (\n                  <div className=\"mt-3 ml-14\">\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-red-800\">\n                        <strong>Rejection Reason:</strong> {document.rejectionReason}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </Card>\n\n      {selectedDocument && (\n        <DocumentReviewModal\n          document={selectedDocument}\n          isOpen={!!selectedDocument}\n          onClose={() => setSelectedDocument(null)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":7867},"client/src/components/documents/document-review-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DOCUMENT_TYPES } from \"@/lib/constants\";\nimport { FileText, Download } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface DocumentReviewModalProps {\n  document: any;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function DocumentReviewModal({ document, isOpen, onClose }: DocumentReviewModalProps) {\n  const [reviewStatus, setReviewStatus] = useState(\"\");\n  const [comments, setComments] = useState(\"\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const reviewMutation = useMutation({\n    mutationFn: async (data: { status: string; rejectionReason?: string }) => {\n      return apiRequest(\"PUT\", `/api/documents/${document.id}/status`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Document review submitted successfully.\",\n      });\n      onClose();\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitReview = () => {\n    if (!reviewStatus) {\n      toast({\n        title: \"Missing Selection\",\n        description: \"Please select a review decision.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (reviewStatus === 'REJECTED' && !comments.trim()) {\n      toast({\n        title: \"Missing Comments\",\n        description: \"Please provide a reason for rejection.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    reviewMutation.mutate({\n      status: reviewStatus,\n      rejectionReason: reviewStatus === 'REJECTED' ? comments : undefined,\n    });\n  };\n\n  const handleDownload = async () => {\n    try {\n      const response = await fetch(`/api/documents/${document.id}/download`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = document.originalName;\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Unable to download the document.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getDocumentTypeName = (type: string) => {\n    return DOCUMENT_TYPES[type as keyof typeof DOCUMENT_TYPES]?.name || type;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>Document Review</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 py-4\">\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-4\">Document Information</h4>\n            <dl className=\"space-y-3\">\n              {document.client && (\n                <div>\n                  <dt className=\"text-sm font-medium text-gray-500\">Client</dt>\n                  <dd className=\"text-sm text-gray-900\">\n                    {document.client.user.firstName} {document.client.user.lastName}\n                    {document.client.user.companyName && (\n                      <span className=\"text-gray-500\"> - {document.client.user.companyName}</span>\n                    )}\n                  </dd>\n                </div>\n              )}\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500\">Document Type</dt>\n                <dd className=\"text-sm text-gray-900\">{getDocumentTypeName(document.documentType)}</dd>\n              </div>\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500\">Filename</dt>\n                <dd className=\"text-sm text-gray-900\">{document.originalName}</dd>\n              </div>\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500\">Upload Date</dt>\n                <dd className=\"text-sm text-gray-900\">\n                  {format(new Date(document.uploadedAt), \"MMMM d, yyyy 'at' h:mm a\")}\n                </dd>\n              </div>\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500\">File Size</dt>\n                <dd className=\"text-sm text-gray-900\">\n                  {(document.fileSize / 1024 / 1024).toFixed(2)} MB\n                </dd>\n              </div>\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500\">Current Status</dt>\n                <dd className=\"text-sm text-gray-900 capitalize\">{document.status.toLowerCase()}</dd>\n              </div>\n            </dl>\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-4\">Document Preview</h4>\n            <div className=\"bg-gray-100 rounded-lg h-64 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <FileText className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n                <p className=\"text-gray-600 text-sm mb-4\">\n                  {document.mimeType === 'application/pdf' ? 'PDF Document' : 'Image File'}\n                </p>\n                <Button\n                  onClick={handleDownload}\n                  variant=\"outline\"\n                  className=\"text-primary border-primary hover:bg-blue-50\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Full Document\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {user?.role === 'ADMIN' && (\n          <div className=\"pt-6 border-t border-gray-200\">\n            <h4 className=\"font-medium text-gray-900 mb-4\">Review Action</h4>\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Review Decision\n                </Label>\n                <Select value={reviewStatus} onValueChange={setReviewStatus}>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Select action...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"APPROVED\">Approve Document</SelectItem>\n                    <SelectItem value=\"REJECTED\">Reject Document</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Comments {reviewStatus === 'REJECTED' && \"(Required for rejection)\"}\n                </Label>\n                <Textarea\n                  value={comments}\n                  onChange={(e) => setComments(e.target.value)}\n                  className=\"h-24\"\n                  placeholder=\"Enter reason for rejection or approval notes...\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-end space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={onClose}\n                  disabled={reviewMutation.isPending}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSubmitReview}\n                  disabled={reviewMutation.isPending}\n                  className=\"bg-primary hover:bg-blue-700\"\n                >\n                  {reviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8566},"client/src/components/documents/document-upload.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, FileText, CheckCircle, MessageSquare, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DOCUMENT_TYPES } from \"@/lib/constants\";\n\ninterface DocumentUploadZoneProps {\n  documentType: string;\n  documentInfo: any;\n  existingDoc?: any;\n  onUpload: (file: File, documentType: string) => void;\n  isUploading: boolean;\n}\n\nfunction DocumentUploadZone({ \n  documentType, \n  documentInfo, \n  existingDoc,\n  onUpload, \n  isUploading \n}: DocumentUploadZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles.length > 0 && !existingDoc) {\n      onUpload(acceptedFiles[0], documentType);\n    }\n  }, [onUpload, documentType, existingDoc]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'image/jpeg': ['.jpg', '.jpeg'],\n      'image/png': ['.png']\n    },\n    maxFiles: 1,\n    disabled: !!existingDoc\n  });\n\n  const getStatusBadge = () => {\n    if (!existingDoc) return null;\n    \n    switch (existingDoc.status) {\n      case 'APPROVED':\n        return <Badge className=\"bg-green-100 text-green-800\">Approved</Badge>;\n      case 'PENDING':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending Review</Badge>;\n      case 'REJECTED':\n        return <Badge className=\"bg-red-100 text-red-800\">Rejected</Badge>;\n      case 'NEEDS_REVISION':\n        return <Badge className=\"bg-orange-100 text-orange-800\">Needs Revision</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Unknown</Badge>;\n    }\n  };\n\n  return (\n    <Card className={`w-full transition-all duration-200 h-full ${\n      existingDoc ? 'bg-gray-50 border-gray-200' : \n      isDragActive ? 'border-primary border-2 bg-blue-50' : \n      'hover:border-gray-300 hover:shadow-md'\n    }`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium text-gray-900\">\n            {documentInfo.name}\n          </CardTitle>\n          {getStatusBadge()}\n        </div>\n        {documentInfo.required && (\n          <Badge variant=\"outline\" className=\"text-xs w-fit\">\n            Required\n          </Badge>\n        )}\n      </CardHeader>\n      \n      <CardContent>\n        <div\n          {...getRootProps()}\n          className={`\n            relative min-h-[160px] border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-all duration-200\n            ${existingDoc ? \n              'border-gray-200 bg-gray-50 cursor-not-allowed' : \n              isDragActive ? \n                'border-primary bg-blue-50 border-solid' : \n                'border-gray-300 hover:border-gray-400 hover:bg-gray-50'\n            }\n          `}\n        >\n          <input {...getInputProps()} />\n          \n          {existingDoc ? (\n            // Uploaded state\n            <div className=\"flex flex-col items-center justify-center space-y-2\">\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              <p className=\"text-sm font-medium text-gray-700\">\n                {existingDoc.originalName}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Uploaded {new Date(existingDoc.uploadedAt).toLocaleDateString()}\n              </p>\n              \n              {/* Comments section */}\n              <div className=\"mt-3 flex items-center space-x-2\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"text-blue-600 hover:text-blue-700\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // TODO: Open comments dialog\n                    console.log('Comments clicked for', existingDoc.originalName);\n                  }}\n                >\n                  <MessageSquare className=\"h-3 w-3 mr-1\" />\n                  Comments\n                </Button>\n              </div>\n              \n              {existingDoc.reviewNotes && (\n                <div className=\"mt-2 p-2 bg-yellow-50 rounded text-xs text-gray-700 border border-yellow-200\">\n                  <strong>Review Notes:</strong> {existingDoc.reviewNotes}\n                </div>\n              )}\n            </div>\n          ) : isUploading ? (\n            // Uploading state\n            <div className=\"flex flex-col items-center justify-center space-y-2\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              <p className=\"text-sm font-medium text-gray-700\">Uploading...</p>\n            </div>\n          ) : (\n            // Upload state\n            <div className=\"flex flex-col items-center justify-center space-y-2\">\n              <Upload className={`h-8 w-8 ${isDragActive ? 'text-primary' : 'text-gray-400'}`} />\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-gray-700\">\n                  {isDragActive ? 'Drop file here' : 'Drag & Drop files here or'}\n                </p>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"mt-2 bg-orange-500 hover:bg-orange-600 text-white border-orange-500\"\n                  type=\"button\"\n                >\n                  Browse for files\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"mt-3 text-xs text-gray-500\">\n          <p>{documentInfo.description}</p>\n          <p className=\"mt-1\">\n            Accepted: {documentInfo.acceptedTypes.join(\", \")} (max {documentInfo.maxSize}MB)\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function DocumentUpload() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadingTypes, setUploadingTypes] = useState<Set<string>>(new Set());\n\n  // Get existing documents to show completed uploads\n  const { data: documents = [] } = useQuery<any[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async ({ file, documentType }: { file: File; documentType: string }) => {\n      const formData = new FormData();\n      formData.append(\"document\", file);\n      formData.append(\"documentType\", documentType);\n\n      const response = await apiRequest(\"POST\", \"/api/documents\", formData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Document uploaded successfully!\",\n        description: `${DOCUMENT_TYPES[variables.documentType as keyof typeof DOCUMENT_TYPES]?.name} has been submitted for review.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      setUploadingTypes(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(variables.documentType);\n        return newSet;\n      });\n    },\n    onError: (error: Error, variables) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setUploadingTypes(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(variables.documentType);\n        return newSet;\n      });\n    },\n  });\n\n  const handleUpload = (file: File, documentType: string) => {\n    setUploadingTypes(prev => new Set(prev).add(documentType));\n    uploadMutation.mutate({ file, documentType });\n  };\n\n  // Create a map of existing documents by type\n  const existingDocsByType = documents.reduce((acc, doc) => {\n    acc[doc.documentType] = doc;\n    return acc;\n  }, {} as Record<string, any>);\n\n  return (\n    <div className=\"w-full h-full min-h-screen bg-white\">\n      <div className=\"h-full p-8\">\n        <div className=\"text-center mb-10\">\n          <h2 className=\"text-3xl font-bold text-gray-900\">Document Upload</h2>\n          <p className=\"text-gray-600 mt-3 text-lg\">\n            Upload your compliance documents. Each document type has its own upload area.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8 pb-8\">\n          {Object.entries(DOCUMENT_TYPES).map(([key, docInfo]) => (\n            <DocumentUploadZone\n              key={key}\n              documentType={key}\n              documentInfo={docInfo}\n              existingDoc={existingDocsByType[key]}\n              onUpload={handleUpload}\n              isUploading={uploadingTypes.has(key)}\n            />\n          ))}\n        </div>\n\n        {documents.length > 0 && (\n          <div className=\"mt-12 p-6 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-semibold text-blue-900 mb-4 text-lg\">Upload Progress</h3>\n            <div className=\"flex flex-wrap items-center gap-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n                <span className=\"text-sm text-gray-700 font-medium\">\n                  {documents.length} documents uploaded\n                </span>\n              </div>\n              <div className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 text-yellow-500 mr-2\" />\n                <span className=\"text-sm text-gray-700 font-medium\">\n                  {documents.filter(d => d.status === 'PENDING').length} pending review\n                </span>\n              </div>\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n                <span className=\"text-sm text-gray-700 font-medium\">\n                  {documents.filter(d => d.status === 'APPROVED').length} approved\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10281},"client/src/components/layout/header.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          <p className=\"text-gray-600\">{subtitle}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n            Active Account\n          </Badge>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":800},"client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { \n  Shield, \n  BarChart3, \n  FileUp, \n  History, \n  Users, \n  ClipboardCheck,\n  LogOut,\n  ChevronDown,\n  UserCheck,\n  Menu,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n}\n\nexport default function Sidebar({ isCollapsed = false, onToggle }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Query to get all users for admin impersonation\n  const { data: allUsers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    enabled: user?.role === 'ADMIN',\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      // Clear the user data from the cache\n      queryClient.setQueryData([\"/api/auth/user\"], null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const impersonateMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/impersonate\", { userId });\n      return response.json();\n    },\n    onSuccess: (impersonatedUser) => {\n      queryClient.setQueryData([\"/api/auth/user\"], impersonatedUser);\n      toast({\n        title: \"User Switched\",\n        description: `Now viewing as ${impersonatedUser.firstName} ${impersonatedUser.lastName}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Switch Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stopImpersonationMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/stop-impersonate\");\n      return response.json();\n    },\n    onSuccess: (adminUser) => {\n      queryClient.setQueryData([\"/api/auth/user\"], adminUser);\n      toast({\n        title: \"Returned to Admin\",\n        description: \"Now viewing as admin account\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Return Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    if (!firstName && !lastName) return \"U\";\n    return `${firstName?.[0] || \"\"}${lastName?.[0] || \"\"}`.toUpperCase();\n  };\n\n  const navItems = [\n    { href: \"/\", icon: BarChart3, label: \"Overview\", roles: [\"CLIENT\", \"ADMIN\"] },\n    { href: \"/documents\", icon: FileUp, label: \"Documents\", roles: [\"CLIENT\"] },\n    { href: \"/activity\", icon: History, label: \"Activity\", roles: [\"CLIENT\"] },\n  ];\n\n  const adminItems = [\n    { href: \"/admin\", icon: Users, label: \"All Clients\", roles: [\"ADMIN\"] },\n    { href: \"/admin/documents\", icon: ClipboardCheck, label: \"Document Review\", roles: [\"ADMIN\"] },\n  ];\n\n  const filteredNavItems = navItems.filter(item => \n    item.roles.includes(user?.role || \"CLIENT\")\n  );\n\n  const filteredAdminItems = adminItems.filter(item => \n    item.roles.includes(user?.role || \"CLIENT\")\n  );\n\n  const isActive = (href: string) => {\n    if (href === \"/\" && location === \"/\") return true;\n    if (href !== \"/\" && location.startsWith(href)) return true;\n    return false;\n  };\n\n  return (\n    <div className={`bg-white shadow-lg border-r border-gray-200 flex flex-col transition-all duration-300 relative ${\n      isCollapsed ? 'w-16' : 'w-64'\n    }`}>\n      {/* Collapse Toggle */}\n      <div className=\"absolute -right-3 top-6 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onToggle}\n          className=\"h-6 w-6 rounded-full p-0 bg-white border shadow-md\"\n        >\n          {isCollapsed ? (\n            <ChevronRight className=\"h-3 w-3\" />\n          ) : (\n            <ChevronLeft className=\"h-3 w-3\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Logo */}\n      <div className={`p-6 border-b border-gray-200 ${isCollapsed ? 'px-3' : ''}`}>\n        <div className=\"flex items-center\">\n          <Shield className={`h-8 w-8 text-primary ${isCollapsed ? '' : 'mr-3'}`} />\n          {!isCollapsed && (\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Secure2Send</h1>\n              <p className=\"text-xs text-gray-500\">Compliance Platform</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {filteredNavItems.map((item) => {\n          const Icon = item.icon;\n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={isActive(item.href) ? \"default\" : \"ghost\"}\n                className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'} ${\n                  isActive(item.href) \n                    ? \"bg-blue-50 text-primary border-r-2 border-primary\" \n                    : \"text-gray-700 hover:bg-gray-100\"\n                }`}\n                title={isCollapsed ? item.label : undefined}\n              >\n                <Icon className={`h-4 w-4 ${!isCollapsed ? 'mr-3' : ''}`} />\n                {!isCollapsed && item.label}\n              </Button>\n            </Link>\n          );\n        })}\n        \n        {/* Admin Section */}\n        {filteredAdminItems.length > 0 && (\n          <div className=\"pt-4 border-t border-gray-200 mt-4\">\n            {!isCollapsed && (\n              <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-2 px-3\">\n                Admin Tools\n              </p>\n            )}\n            {filteredAdminItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive(item.href) ? \"default\" : \"ghost\"}\n                    className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'} ${\n                      isActive(item.href) \n                        ? \"bg-blue-50 text-primary border-r-2 border-primary\" \n                        : \"text-gray-700 hover:bg-gray-100\"\n                    }`}\n                    title={isCollapsed ? item.label : undefined}\n                  >\n                    <Icon className={`h-4 w-4 ${!isCollapsed ? 'mr-3' : ''}`} />\n                    {!isCollapsed && item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n      </nav>\n      \n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-200\">\n        {/* Admin User Switcher */}\n        {user?.role === 'ADMIN' && !isCollapsed && (\n          <div className=\"mb-3\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between text-xs\">\n                  <div className=\"flex items-center\">\n                    <UserCheck className=\"h-3 w-3 mr-2\" />\n                    Switch User\n                  </div>\n                  <ChevronDown className=\"h-3 w-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"start\">\n                {allUsers.filter(u => u.role === 'CLIENT').map((clientUser) => (\n                  <DropdownMenuItem\n                    key={clientUser.id}\n                    onClick={() => impersonateMutation.mutate(clientUser.id)}\n                    disabled={impersonateMutation.isPending}\n                  >\n                    <div className=\"flex items-center w-full\">\n                      <Avatar className=\"h-6 w-6 mr-2\">\n                        <AvatarFallback className=\"text-xs\">\n                          {getInitials(clientUser.firstName || undefined, clientUser.lastName || undefined)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">{clientUser.firstName} {clientUser.lastName}</p>\n                        <p className=\"text-xs text-muted-foreground\">{clientUser.email}</p>\n                      </div>\n                    </div>\n                  </DropdownMenuItem>\n                ))}\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={() => stopImpersonationMutation.mutate()}\n                  disabled={stopImpersonationMutation.isPending}\n                >\n                  <Shield className=\"h-4 w-4 mr-2\" />\n                  Return to Admin\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        )}\n\n        <div className={`flex items-center ${isCollapsed ? 'justify-center' : ''}`}>\n          <Avatar className={`${isCollapsed ? 'h-8 w-8' : 'h-8 w-8 mr-3'}`}>\n            <AvatarFallback className=\"bg-primary text-white text-sm\">\n              {getInitials(user?.firstName || undefined, user?.lastName || undefined)}\n            </AvatarFallback>\n          </Avatar>\n          {!isCollapsed && (\n            <>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-900\">\n                  {user?.firstName} {user?.lastName}\n                </p>\n                <p className=\"text-xs text-gray-500 capitalize\">\n                  {user?.role?.toLowerCase()}\n                </p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => logoutMutation.mutate()}\n                disabled={logoutMutation.isPending}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10901},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}