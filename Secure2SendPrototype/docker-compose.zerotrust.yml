# Docker Compose configuration for Secure2Send with Cloudflare Zero Trust
# This sets up the application with Cloudflare tunnel for secure access

version: '3.8'

services:
  # Main Secure2Send application
  secure2send:
    build: .
    container_name: secure2send-app
    environment:
      - NODE_ENV=production
      - PORT=8080
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - logs:/app/logs
    networks:
      - secure2send-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: secure2send-tunnel
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./tunnel-config-production.yml:/etc/cloudflared/config.yml:ro
      - ./cloudflared:/etc/cloudflared:ro
    networks:
      - secure2send-network
    restart: unless-stopped
    depends_on:
      secure2send:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "info", "secure2send-tunnel"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}

  # Optional: Redis for session storage (recommended for production)
  redis:
    image: redis:7-alpine
    container_name: secure2send-redis
    networks:
      - secure2send-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    container_name: secure2send-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - secure2send-network
    restart: unless-stopped
    depends_on:
      - secure2send
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  logs:
  redis-data:

networks:
  secure2send-network:
    driver: bridge






